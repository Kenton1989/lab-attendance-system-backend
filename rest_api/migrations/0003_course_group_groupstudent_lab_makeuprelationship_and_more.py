# Generated by Django 4.1.4 on 2022-12-09 03:32

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone
import rest_api.validators


class Migration(migrations.Migration):

    dependencies = [
        ('rest_api', '0002_week_week_ensure_monday_week_ensure_7_days_gap'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True, verbose_name='course code')),
                ('title', models.CharField(max_length=200, verbose_name='course title')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='group name')),
                ('is_active', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='GroupStudent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seat', models.CharField(blank=True, max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Lab',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_count', models.IntegerField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='MakeUpRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_no', models.IntegerField(blank=True)),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('is_compulsory', models.BooleanField(default=True)),
                ('allow_late_check_in', models.BooleanField(default=True)),
                ('check_in_deadline', models.DateTimeField()),
                ('is_active', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='StudentAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_in_state', models.CharField(blank=True, max_length=20)),
                ('check_in_datetime', models.DateTimeField(blank=True)),
                ('last_modify', models.DateTimeField(default=django.utils.timezone.now)),
                ('remark', models.CharField(blank=True, max_length=200)),
                ('is_active', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='TeacherAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_in_state', models.CharField(blank=True, max_length=20)),
                ('check_in_datetime', models.DateTimeField(blank=True)),
                ('last_modify', models.DateTimeField(default=django.utils.timezone.now)),
                ('remark', models.CharField(blank=True, max_length=200)),
                ('is_active', models.BooleanField()),
            ],
        ),
        migrations.RemoveConstraint(
            model_name='week',
            name='ensure_monday',
        ),
        migrations.RemoveConstraint(
            model_name='week',
            name='ensure_7_days_gap',
        ),
        migrations.AlterField(
            model_name='week',
            name='monday',
            field=models.DateField(validators=[rest_api.validators.monday_validator]),
        ),
        migrations.AlterField(
            model_name='week',
            name='next_monday',
            field=models.DateField(validators=[rest_api.validators.monday_validator]),
        ),
        migrations.AddConstraint(
            model_name='week',
            constraint=models.CheckConstraint(check=models.Q(('next_monday', django.db.models.expressions.CombinedExpression(models.F('monday'), '+', models.Value(datetime.timedelta(days=7))))), name='ensure_7_days_gap', violation_error_message='next_monday must be exactly 7 days greater then monday'),
        ),
        migrations.AddField(
            model_name='teacherattendance',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_api.session'),
        ),
        migrations.AddField(
            model_name='teacherattendance',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='studentattendance',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_api.session'),
        ),
        migrations.AddField(
            model_name='studentattendance',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='session',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='rest_api.group'),
        ),
        migrations.AddField(
            model_name='session',
            name='lab',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='rest_api.lab'),
        ),
        migrations.AddField(
            model_name='session',
            name='make_up_students',
            field=models.ManyToManyField(related_name='make_up_sessions', through='rest_api.MakeUpRelationship', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='makeuprelationship',
            name='make_up_session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='make_up_session_of_make_up_relationship', to='rest_api.session'),
        ),
        migrations.AddField(
            model_name='makeuprelationship',
            name='original_session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='original_session_of_make_up_relationship', to='rest_api.session'),
        ),
        migrations.AddField(
            model_name='makeuprelationship',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='lab',
            name='executives',
            field=models.ManyToManyField(related_name='executive_of_labs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='lab',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='lab_info', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='groupstudent',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_api.group'),
        ),
        migrations.AddField(
            model_name='groupstudent',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='group',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='rest_api.course'),
        ),
        migrations.AddField(
            model_name='group',
            name='students',
            field=models.ManyToManyField(related_name='student_of_groups', through='rest_api.GroupStudent', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='group',
            name='supervisors',
            field=models.ManyToManyField(related_name='supervisor_of_groups', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='group',
            name='teachers',
            field=models.ManyToManyField(related_name='teacher_of_groups', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='course',
            name='coordinators',
            field=models.ManyToManyField(related_name='coordinator_of_courses', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='teacherattendance',
            constraint=models.UniqueConstraint(fields=('session', 'user'), name='unique_teacher_attendance_session', violation_error_message='Only one attendance record allowed per session per teacher.'),
        ),
        migrations.AddConstraint(
            model_name='studentattendance',
            constraint=models.UniqueConstraint(fields=('session', 'user'), name='unique_student_attendance_session', violation_error_message='Only one attendance record allowed per session per student.'),
        ),
        migrations.AddConstraint(
            model_name='makeuprelationship',
            constraint=models.UniqueConstraint(fields=('student', 'original_session'), name='unique_original_session_student', violation_error_message='Student can make up a session using only one another session.'),
        ),
        migrations.AddConstraint(
            model_name='makeuprelationship',
            constraint=models.UniqueConstraint(fields=('student', 'make_up_session'), name='unique_make_up_session_student', violation_error_message='Student can only participate one session for at most once.'),
        ),
        migrations.AddConstraint(
            model_name='groupstudent',
            constraint=models.UniqueConstraint(fields=('group', 'student'), name='unique_group_student', violation_error_message='Student should be unique under a group.'),
        ),
        migrations.AddConstraint(
            model_name='group',
            constraint=models.UniqueConstraint(fields=('course', 'name'), name='unique_course_group', violation_error_message='Group name should be unique under a course.'),
        ),
    ]
